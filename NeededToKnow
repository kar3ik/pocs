virtualloc, rtlmovemomery, createthread write a shell code to run by using above three apis to run code in memory from vba
calling win32 apis in vba

virtualloc, rtlmovemomery, createthread write a shell code to run by using above three apis to run code in memory from powershell
calling win32 apis in powershell


what are assemblies
[appdomain]::currentdomain.getassemblies()

[appdomain]::currentdomain.getassemblies() | Sort-Object -Property fullname | Format-Table fullname

what are unmanaged dll
how to locate functions in unmanaged dll
dynamic lookup in c
to perform dynamic lookup function address by win32 apis
GetModuleHandle 
GetProcAddress  

how to get assembies in specifc process (ex - powershell process)



$Assemblies = [AppDomain]::CurrentDomain.GetAssemblies()

$Assemblies | ForEach-Object {
    $_.GetTypes() | ForEach-Object {
        $_ | Get-Member -Static | Where-Object {
            $_.TypeName.Contains('Unsafe')
        }
    } 2> $null
}


whn c# code wants to directly invoke win32 api it must provides the unsafe keyword
if any functions are to be used they must be declared as static to avoid instantion 





$Assemblies = [AppDomain]::CurrentDomain.GetAssemblies()

$Assemblies | ForEach-Object {
    $_.Location
    $_.GetTypes() | ForEach-Object {
        $_ | Get-Member -Static | Where-Object {
            $_.TypeName -eq 'Microsoft.Win32.UnsafeNativeMethods'
        }
    } 2> $null
}








$systemdll = ([AppDomaiin]::CurrentDomain.GetAssemblies() | Where-Object {
  $_.GlobalAssemblyCachr -And $_.Location.Split('\\')[-1].Equals('System.dll')})

$unsafeObj = $systemdll.GetType('Microsoft.Win32.UnsafeNativeMethods')
$GetModuleHandle = $unsafeObj.GetMethod('GetModuleHandle')
$GetModuleHandle.Invoke($null, @("user32.dll"))



(or)


# Retrieve the System.dll assembly from loaded assemblies
$systemDll = [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object {
    $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1].Equals('System.dll')
}

# Check if System.dll was found
if ($systemDll) {
    # Get the type for Microsoft.Win32.UnsafeNativeMethods
    $unsafeType = $systemDll.GetType('Microsoft.Win32.UnsafeNativeMethods')

    # Check if the type was found
    if ($unsafeType) {
        # Get the method info for GetModuleHandle
        $getModuleHandle = $unsafeType.GetMethod('GetModuleHandle')

        # Check if the method was found
        if ($getModuleHandle) {
            # Invoke the GetModuleHandle method
            $result = $getModuleHandle.Invoke($null, @("user32.dll"))
            Write-Output "Result: $result"
        } else {
            Write-Error "Method 'GetModuleHandle' not found in type 'Microsoft.Win32.UnsafeNativeMethods'"
        }
    } else {
        Write-Error "Type 'Microsoft.Win32.UnsafeNativeMethods' not found in System.dll"
    }
} else {
    Write-Error "System.dll not found in loaded assemblies"
}





$unsafeObj.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress") {$_}}







$systemdll = ([AppDomaiin]::CurrentDomain.GetAssemblies() | Where-Object {
  $_.GlobalAssemblyCachr -And $_.Location.Split('\\')[-1].Equals('System.dll')})

$unsafeObj = $systemdll.GetType('Microsoft.Win32.UnsafeNativeMethods')
$GetModuleHandle = $unsafeObj.GetMethod('GetModuleHandle')
$user32 = $GetModuleHandle.Invoke($null, @("user32.dll"))
$tmp=@()
$unsafeObj.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress" {$tmp+=$_}}
$GetProcAddress = $tmp[0]
$GetProcAddress.Invoke($null, @($user32, "MessageBoxA"))


(or)

# Retrieve the System.dll assembly from loaded assemblies
$systemDll = [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object {
    $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1].Equals('System.dll')
}

# Check if System.dll was found
if ($systemDll) {
    # Get the type for Microsoft.Win32.UnsafeNativeMethods
    $unsafeType = $systemDll.GetType('Microsoft.Win32.UnsafeNativeMethods')

    # Check if the type was found
    if ($unsafeType) {
        # Get the method info for GetModuleHandle
        $getModuleHandle = $unsafeType.GetMethod('GetModuleHandle')

        # Check if the method was found
        if ($getModuleHandle) {
            # Invoke the GetModuleHandle method
            $user32 = $getModuleHandle.Invoke($null, @("user32.dll"))

            # Get the method info for GetProcAddress
            $tmp = @()
            $unsafeType.GetMethods() | ForEach-Object {
                if ($_.Name -eq "GetProcAddress") {
                    $tmp += $_
                }
            }
            $getProcAddress = $tmp[0]

            # Check if GetProcAddress method was found
            if ($getProcAddress) {
                # Invoke GetProcAddress method
                $result = $getProcAddress.Invoke($null, @($user32, "MessageBoxA"))
                Write-Output "Result: $result"
            } else {
                Write-Error "Method 'GetProcAddress' not found in type 'Microsoft.Win32.UnsafeNativeMethods'"
            }
        } else {
            Write-Error "Method 'GetModuleHandle' not found in type 'Microsoft.Win32.UnsafeNativeMethods'"
        }
    } else {
        Write-Error "Type 'Microsoft.Win32.UnsafeNativeMethods' not found in System.dll"
    }
} else {
    Write-Error "System.dll not found in loaded assemblies"
}








functionLookup.ps
-----------------

function LookupFunc{
	Param ($moduleName, $functionName)
	$assem = ([AppDomain]::CurrentDomain.GetAssemblies() |
	Where-Object { $_.GlobalAssemblyCache -And $_.Location.Split('\\')[-1].
	Equals('System.dll') }).GetType('Microsoft.win32.UnsafeNativeMethods')
	tmp=@()
	$assem.GetMethods() | ForEach-Object {If($_.Name -eq "GetProcAddress" {$tmp+=$_}}
	return $tmp[0].Invoke($null , @(($assem.GetMethod('GetModuleHandle')).Invoke($null, @($moduleName)), $functionName))

}

$MessageBoxA = LookupFunc user32.dll MessageBoxA


(or)


function LookupFunc {
    param (
        [string] $moduleName,
        [string] $functionName
    )

    # Retrieve the System.dll assembly from loaded assemblies
    $systemDll = [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object {
        $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1].Equals('System.dll')
    }

    if ($systemDll) {
        # Get the type for Microsoft.Win32.UnsafeNativeMethods
        $unsafeType = $systemDll.GetType('Microsoft.Win32.UnsafeNativeMethods')

        if ($unsafeType) {
            # Get the method info for GetModuleHandle
            $getModuleHandle = $unsafeType.GetMethod('GetModuleHandle')

            if ($getModuleHandle) {
                # Invoke GetModuleHandle to get module handle
                $moduleHandle = $getModuleHandle.Invoke($null, @($moduleName))

                # Get the method info for GetProcAddress
                $tmp = @()
                $unsafeType.GetMethods() | ForEach-Object {
                    if ($_.Name -eq "GetProcAddress") {
                        $tmp += $_
                    }
                }
                $getProcAddress = $tmp[0]

                if ($getProcAddress) {
                    # Invoke GetProcAddress to get function pointer
                    return $getProcAddress.Invoke($null, @($moduleHandle, $functionName))
                } else {
                    Write-Error "Method 'GetProcAddress' not found in type 'Microsoft.Win32.UnsafeNativeMethods'"
                }
            } else {
                Write-Error "Method 'GetModuleHandle' not found in type 'Microsoft.Win32.UnsafeNativeMethods'"
            }
        } else {
            Write-Error "Type 'Microsoft.Win32.UnsafeNativeMethods' not found in System.dll"
        }
    } else {
        Write-Error "System.dll not found in loaded assemblies"
    }
}

usage : 
$MessageBoxA = LookupFunc -moduleName "user32.dll" -functionName "MessageBoxA"
Write-Output "MessageBoxA function pointer: $MessageBoxA"





Deligate Type reflection
------------------------



function LookupFunc {
    param ($moduleName, $functionName)

    # Retrieve the System.dll assembly from loaded assemblies
    $systemDll = [AppDomain]::CurrentDomain.GetAssemblies() | Where-Object {
        $_.GlobalAssemblyCache -and $_.Location.Split('\\')[-1] -eq 'System.dll'
    }

    # Get the type for Microsoft.Win32.UnsafeNativeMethods
    $unsafeType = $systemDll.GetType('Microsoft.Win32.UnsafeNativeMethods')

    # Get the method info for GetProcAddress
    $getProcAddress = $unsafeType.GetMethod('GetProcAddress')

    # Get the method info for GetModuleHandle and invoke it
    $moduleHandle = $unsafeType.GetMethod('GetModuleHandle').Invoke($null, @($moduleName))

    # Invoke GetProcAddress to get the function pointer
    return $getProcAddress.Invoke($null, @($moduleHandle, $functionName))
}

# Usage: Retrieve the function pointer for MessageBoxA from user32.dll
$MessageBoxA = LookupFunc 'user32.dll' 'MessageBoxA'

# Create a new dynamic assembly
$MyAssembly = New-Object System.Reflection.AssemblyName('ReflectedDelegate')
$Domain = [AppDomain]::CurrentDomain
$MyAssemblyBuilder = $Domain.DefineDynamicAssembly($MyAssembly, [System.Reflection.Emit.AssemblyBuilderAccess]::Run)
$MyModuleBuilder = $MyAssemblyBuilder.DefineDynamicModule('InMemoryModule', $false)
$MyTypeBuilder = $MyModuleBuilder.DefineType('MyDelegateType', 'Class, Public, Sealed, AnsiClass, AutoClass', [System.MulticastDelegate])

# Define the constructor for the delegate type
$MyConstructorBuilder = $MyTypeBuilder.DefineConstructor(
    'RTSpecialName, HideBySig, Public',
    [System.Reflection.CallingConventions]::Standard,
    @([IntPtr], [String], [String], [int])
)
$MyConstructorBuilder.SetImplementationFlags([System.Reflection.MethodImplAttributes]::Runtime)

# Define the Invoke method for the delegate type
$MyMethodBuilder = $MyTypeBuilder.DefineMethod(
    'Invoke',
    'Public, HideBySig, NewSlot, Virtual',
    [int],
    @([IntPtr], [String], [String], [int])
)
$MyMethodBuilder.SetImplementationFlags([System.Reflection.MethodImplAttributes]::Runtime)

# Create the type
$MyDelegateType = $MyTypeBuilder.CreateType()

# Convert the function pointer to a delegate
$MyFunction = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer($MessageBoxA, $MyDelegateType)

# Invoke the delegate
$MyFunction.Invoke([IntPtr]::Zero, "Hello world", "This is my MessageBox", 0)

